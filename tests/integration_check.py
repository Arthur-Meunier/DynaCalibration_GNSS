# -*- coding: utf-8 -*-
"""
Created on Sun Aug  3 21:40:21 2025

@author: a.meunier
"""

# integration_check.py - Script de contr√¥le pour v√©rifier l'int√©gration

import sys
import traceback
from pathlib import Path

def check_integration():
    """V√©rifie que l'int√©gration du nouveau syst√®me fonctionne correctement"""
    
    print("üîç === CONTR√îLE D'INT√âGRATION DU SYST√àME DE PROGRESSION ===\n")
    
    results = {
        "imports": False,
        "progress_manager": False,
        "dashboard": False,
        "page_accueil": False,
        "validateurs": False,
        "compatibility": False
    }
    
    # === TEST 1: IMPORTS ===
    print("1Ô∏è‚É£  Test des imports...")
    try:
        from progress_manager import ProgressManager, TaskValidator, Task, TaskStatus
        print("   ‚úÖ progress_manager import√©")
        
        from app.gui.html_dashboard_widget import HTMLCircularDashboard
        print("   ‚úÖ html_dashboard_widget import√©")
        
        from app.gui.page_accueil import HomePageWidget
        print("   ‚úÖ page_accueil import√©")
        
        results["imports"] = True
        print("   üéâ Tous les imports r√©ussis\n")
        
    except Exception as e:
        print(f"   ‚ùå Erreur import: {e}")
        print("   üí° V√©rifiez que les fichiers sont dans les bons r√©pertoires\n")
        return results
    
    # === TEST 2: PROGRESS MANAGER ===
    print("2Ô∏è‚É£  Test du ProgressManager...")
    try:
        pm = ProgressManager()
        
        # V√©rifier les modules
        expected_modules = ['DIMCON', 'GNSS', 'OBSERVATION', 'QC']
        for module in expected_modules:
            if module in pm.modules:
                tasks_count = len(pm.modules[module])
                print(f"   ‚úÖ Module {module}: {tasks_count} t√¢ches")
            else:
                print(f"   ‚ùå Module {module} manquant")
                raise Exception(f"Module {module} non trouv√©")
        
        # V√©rifier les validateurs
        validator_count = len(pm.validators)
        print(f"   ‚úÖ {validator_count} validateurs enregistr√©s")
        
        results["progress_manager"] = True
        print("   üéâ ProgressManager op√©rationnel\n")
        
    except Exception as e:
        print(f"   ‚ùå Erreur ProgressManager: {e}")
        print("   üí° V√©rifiez la d√©finition des modules et validateurs\n")
        return results
    
    # === TEST 3: DASHBOARD ===
    print("3Ô∏è‚É£  Test du Dashboard...")
    try:
        from PyQt5.QtWidgets import QApplication
        from PyQt5.QtCore import QTimer
        
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)
        
        dashboard = HTMLCircularDashboard()
        
        # V√©rifier les nouvelles m√©thodes
        required_methods = ['update_progress', 'segment_clicked']
        for method in required_methods:
            if hasattr(dashboard, method):
                print(f"   ‚úÖ M√©thode {method} pr√©sente")
            else:
                print(f"   ‚ùå M√©thode {method} manquante")
                raise Exception(f"M√©thode {method} non trouv√©e")
        
        results["dashboard"] = True
        print("   üéâ Dashboard fonctionnel\n")
        
    except Exception as e:
        print(f"   ‚ùå Erreur Dashboard: {e}")
        print("   üí° V√©rifiez que html_dashboard_widget.py a √©t√© mis √† jour\n")
        return results
    
    # === TEST 4: PAGE ACCUEIL ===
    print("4Ô∏è‚É£  Test de la Page d'Accueil...")
    try:
        home_page = HomePageWidget()
        
        # V√©rifier les nouvelles m√©thodes
        new_methods = ['on_task_selected', 'on_progress_updated', 'on_module_completed']
        for method in new_methods:
            if hasattr(home_page, method):
                print(f"   ‚úÖ Nouvelle m√©thode {method} pr√©sente")
            else:
                print(f"   ‚ö†Ô∏è  M√©thode {method} manquante - √† ajouter")
        
        # V√©rifier l'attribut progress_manager
        if hasattr(home_page, 'progress_manager'):
            if home_page.progress_manager is not None:
                print("   ‚úÖ ProgressManager initialis√© dans HomePageWidget")
            else:
                print("   ‚ö†Ô∏è  ProgressManager non initialis√© (mode compatibilit√©)")
        else:
            print("   ‚ùå Attribut progress_manager manquant")
            raise Exception("Attribut progress_manager non trouv√©")
        
        results["page_accueil"] = True
        print("   üéâ Page d'accueil compatible\n")
        
    except Exception as e:
        print(f"   ‚ùå Erreur Page d'Accueil: {e}")
        print("   üí° V√©rifiez que les modifications ont √©t√© appliqu√©es\n")
        return results
    
    # === TEST 5: VALIDATEURS ===
    print("5Ô∏è‚É£  Test des Validateurs...")
    try:
        # Cr√©er des donn√©es de test
        class TestAppData:
            def __init__(self):
                self.dimcon = {
                    'Bow': {'X': 1.0, 'Y': 2.0, 'Z': 3.0},
                    'Port': {'X': 4.0, 'Y': 5.0, 'Z': 6.0},
                    'Stb': {'X': 7.0, 'Y': 8.0, 'Z': 9.0}
                }
                self.gnss_data = {
                    'meridian_convergence': 0.5,
                    'scale_factor': 1.001,
                    'mobile_points': {
                        'mobile_1': {'data': [1, 2, 3]}
                    }
                }
                self.observation_data = {
                    'sensors': {'sensor1': [1, 2, 3]},
                    'calculations': {'calc1': {'statistics': {}}},
                    'sign_conventions': {'sensor1': {'pitch_sign': 1}}
                }
        
        test_data = TestAppData()
        pm = ProgressManager()
        
        # Tester chaque validateur
        validator_tests = [
            ('DimconCoordinatesValidator', 'DIMCON', 'coordinates'),
            ('GnssBaselineValidator', 'GNSS', 'baselines'),
            ('ObservationInstrumentsValidator', 'OBSERVATION', 'instruments')
        ]
        
        for validator_name, module, task_id in validator_tests:
            if validator_name in pm.validators:
                validator = pm.validators[validator_name]
                is_valid, progress, message = validator.validate(test_data)
                print(f"   ‚úÖ {validator_name}: {progress:.1f}% - {message}")
            else:
                print(f"   ‚ùå Validateur {validator_name} manquant")
        
        # Test de calcul global
        all_progress = pm.calculate_all_progress(test_data)
        print(f"   ‚úÖ Calcul global: {len(all_progress)} modules trait√©s")
        
        results["validateurs"] = True
        print("   üéâ Validateurs op√©rationnels\n")
        
    except Exception as e:
        print(f"   ‚ùå Erreur Validateurs: {e}")
        print("   üí° V√©rifiez la logique des validateurs\n")
        traceback.print_exc()
        return results
    
    # === TEST 6: COMPATIBILIT√â ===
    print("6Ô∏è‚É£  Test de Compatibilit√©...")
    try:
        # Simuler l'utilisation normale
        home_page = HomePageWidget()
        
        # Test du syst√®me de fallback
        if hasattr(home_page, 'progress_manager') and home_page.progress_manager:
            print("   ‚úÖ Mode avanc√© activ√©")
        else:
            print("   ‚úÖ Mode compatibilit√© activ√©")
        
        # V√©rifier que les m√©thodes existantes fonctionnent toujours
        old_methods = ['refresh_all_data', 'calculate_progress', 'set_project_loaded']
        for method in old_methods:
            if hasattr(home_page, method):
                print(f"   ‚úÖ M√©thode existante {method} pr√©serv√©e")
            else:
                print(f"   ‚ùå M√©thode existante {method} manquante")
                raise Exception(f"M√©thode {method} supprim√©e par erreur")
        
        results["compatibility"] = True
        print("   üéâ Compatibilit√© assur√©e\n")
        
    except Exception as e:
        print(f"   ‚ùå Erreur Compatibilit√©: {e}")
        print("   üí° V√©rifiez que le code existant n'a pas √©t√© cass√©\n")
        return results
    
    # === R√âSUM√â ===
    print("üìä === R√âSUM√â DU CONTR√îLE ===")
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    for test_name, passed in results.items():
        status = "‚úÖ PASS√â" if passed else "‚ùå √âCHEC"
        print(f"   {test_name.upper()}: {status}")
    
    print(f"\nüéØ R√âSULTAT GLOBAL: {passed_tests}/{total_tests} tests r√©ussis")
    
    if passed_tests == total_tests:
        print("üéâ INT√âGRATION R√âUSSIE ! Le syst√®me est pr√™t √† √™tre utilis√©.")
        print("\nüìù Prochaines √©tapes:")
        print("   1. Testez l'application compl√®te")
        print("   2. V√©rifiez la navigation entre modules")
        print("   3. Testez les actions rapides")
        print("   4. V√©rifiez la sauvegarde de projet")
    else:
        print("‚ö†Ô∏è  INT√âGRATION PARTIELLE. Corrigez les erreurs avant de continuer.")
        print("\nüîß Actions recommand√©es:")
        if not results["imports"]:
            print("   - V√©rifiez l'emplacement des fichiers")
        if not results["progress_manager"]:
            print("   - V√©rifiez progress_manager.py")
        if not results["dashboard"]:
            print("   - V√©rifiez html_dashboard_widget.py")
        if not results["page_accueil"]:
            print("   - Appliquez les modifications √† page_accueil.py")
        if not results["validateurs"]:
            print("   - V√©rifiez la logique des validateurs")
        if not results["compatibility"]:
            print("   - V√©rifiez que le code existant n'a pas √©t√© modifi√©")
    
    return results

def quick_demo():
    """D√©monstration rapide du syst√®me"""
    print("\nüöÄ === D√âMONSTRATION RAPIDE ===")
    
    try:
        from progress_manager import ProgressManager
        
        # Cr√©er des donn√©es fictives
        class DemoData:
            def __init__(self):
                self.dimcon = {
                    'Bow': {'X': 1.0, 'Y': 2.0, 'Z': 3.0},
                    'Port': {'X': 4.0, 'Y': 5.0, 'Z': 6.0},
                    'Stb': {'X': 7.0, 'Y': 8.0, 'Z': 9.0}
                }
                self.gnss_data = {'mobile_points': {}, 'meridian_convergence': 0}
                self.observation_data = {'sensors': {}, 'calculations': {}}
        
        demo_data = DemoData()
        pm = ProgressManager()
        
        print("üìä Calcul de progression avec donn√©es fictives:")
        all_progress = pm.calculate_all_progress(demo_data)
        
        for module, data in all_progress.items():
            print(f"   {module}: {data['progress']:.1f}% ({data['completed_tasks']}/{data['total_tasks']} t√¢ches)")
            for task in data['tasks']:
                print(f"      ‚îî‚îÄ {task['name']}: {task['progress']:.1f}%")
        
        print("\n‚ú® Le syst√®me fonctionne correctement !")
        
    except Exception as e:
        print(f"‚ùå Erreur d√©mo: {e}")

if __name__ == "__main__":
    results = check_integration()
    
    if all(results.values()):
        quick_demo()
    
    print("\n" + "="*60)
    print("üèÅ Contr√¥le termin√©. Consultez les r√©sultats ci-dessus.")