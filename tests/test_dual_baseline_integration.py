#!/usr/bin/env python3
"""
Script de test pour l'int√©gration du traitement des deux lignes de base
"""

import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire src au path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget
from PyQt5.QtCore import Qt

# Import des modules du projet
from src.core.project_manager import ProjectManager
from src.core.progress_manager import ProgressManager
from src.app.gui.dual_baseline_integration import DualBaselineIntegrationWidget


class TestMainWindow(QMainWindow):
    """Fen√™tre principale de test"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Test - Int√©gration Deux Lignes de Base")
        self.setGeometry(100, 100, 1200, 800)
        
        # Cr√©er les gestionnaires
        self.project_manager = ProjectManager.instance()
        self.progress_manager = ProgressManager()
        
        # Cr√©er le widget d'int√©gration
        self.integration_widget = DualBaselineIntegrationWidget(
            self.project_manager, 
            self.progress_manager
        )
        
        # Configurer la fen√™tre
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        layout = QVBoxLayout(central_widget)
        layout.addWidget(self.integration_widget)
        
        # Connecter les signaux
        self.integration_widget.processing_completed.connect(self.on_processing_completed)
        self.integration_widget.step_completed.connect(self.on_step_completed)
        
        # Charger un projet de test si disponible
        self.load_test_project()
    
    def load_test_project(self):
        """Charge un projet de test"""
        try:
            # Chercher un projet existant
            projects_dir = Path("projets")
            if projects_dir.exists():
                project_files = list(projects_dir.glob("**/*.json"))
                if project_files:
                    # Charger le premier projet trouv√©
                    project_file = project_files[0]
                    success, message = self.project_manager.load_project(str(project_file))
                    if success:
                        print(f"‚úÖ Projet de test charg√©: {project_file.name}")
                    else:
                        print(f"‚ùå Erreur chargement projet: {message}")
                else:
                    print("‚ö†Ô∏è Aucun projet de test trouv√©")
            else:
                print("‚ö†Ô∏è R√©pertoire projets non trouv√©")
                
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement du projet de test: {e}")
    
    def on_processing_completed(self, results):
        """G√®re la fin du traitement complet"""
        print("üéâ Traitement complet termin√©!")
        print(f"R√©sultats: {results}")
    
    def on_step_completed(self, step_name, result):
        """G√®re la fin d'une √©tape"""
        print(f"‚úì √âtape {step_name} termin√©e: {result.get('status', 'unknown')}")


def main():
    """Fonction principale"""
    print("üöÄ D√©marrage du test d'int√©gration")
    
    # Cr√©er l'application
    app = QApplication(sys.argv)
    app.setApplicationName("Test Dual Baseline Integration")
    
    # Cr√©er la fen√™tre principale
    window = TestMainWindow()
    window.show()
    
    print("‚úÖ Interface de test lanc√©e")
    print("üìã Instructions:")
    print("   1. V√©rifiez qu'un projet est charg√©")
    print("   2. Cliquez sur 'D√©marrer RTKLIB' pour tester le traitement")
    print("   3. Une fois RTKLIB termin√©, cliquez sur 'D√©marrer Pr√©paration'")
    print("   4. Consultez les onglets pour voir les r√©sultats")
    
    # Lancer l'application
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
