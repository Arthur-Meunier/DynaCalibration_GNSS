#!/usr/bin/env python3
"""
T√©l√©chargeur SP3 intelligent avec produits combin√©s GPS/GLONASS
Logique de s√©lection automatique optimis√©e bas√©e sur la disponibilit√© temporelle IGS
- IGS Final: disponible apr√®s 12 jours (pr√©cision 2-3 cm) - PRIORIT√â 1
- IGR Rapid: disponible apr√®s 1 jour (pr√©cision 2,5 cm) - PRIORIT√â 2
- IGU Ultra-rapid: disponible apr√®s 3 heures (pr√©cision 3-5 cm) - PRIORIT√â 3
"""

import os
import requests
import gzip
import logging
from datetime import datetime, timedelta
from pathlib import Path

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SP3CombinedDownloader:
    """T√©l√©chargeur SP3 intelligent pour produits combin√©s GPS/GLONASS avec logique optimis√©e"""
    
    def __init__(self, jwt_token, output_dir="./sp3_data"):
        self.jwt_token = jwt_token
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # Session avec authentification
        self.session = requests.Session()
        self.session.headers.update({
            'Authorization': f'Bearer {jwt_token}',
            'User-Agent': 'SP3-Combined-Downloader/2.1'
        })
        
        # URLs de base CDDIS
        self.cddis_base = "https://cddis.nasa.gov/archive/gnss/products"
        self.mgex_base = "https://cddis.nasa.gov/archive/gnss/products/mgex"  # Produits multi-GNSS
        self.broadcast_base = "https://cddis.nasa.gov/archive/gnss/data/daily"
        
        # Seuils de disponibilit√© des produits IGS (en heures)
        self.availability_thresholds = {
            'final': 12 * 24,      # 12 jours minimum
            'rapid': 24,           # 1 jour minimum  
            'ultra_rapid': 3       # 3 heures minimum
        }
        
        # Pr√©cisions et caract√©ristiques des produits
        self.product_specs = {
            'final': {
                'precision': '2-3 cm',
                'description': 'R√©f√©rence de pr√©cision maximale',
                'availability': '12 jours apr√®s',
                'priority': 1
            },
            'rapid': {
                'precision': '2,5 cm',
                'description': 'Solution quotidienne rapide',
                'availability': '1 jour apr√®s',
                'priority': 2
            },
            'ultra_rapid': {
                'precision': '3-5 cm',
                'description': 'Solution temps quasi-r√©el',
                'availability': '3 heures apr√®s',
                'priority': 3
            }
        }
        
    def gps_epoch(self):
        """√âpoque GPS : 6 janvier 1980 00:00:00 UTC"""
        return datetime(1980, 1, 6, 0, 0, 0)
    
    def date_to_gps_week(self, date_str):
        """Convertit une date en semaine GPS et jour de la semaine"""
        if isinstance(date_str, str):
            if '/' in date_str:
                date = datetime.strptime(date_str, "%d/%m/%Y")
            else:
                date = datetime.strptime(date_str, "%Y-%m-%d")
        else:
            date = date_str
        
        gps_start = self.gps_epoch()
        delta = date - gps_start
        gps_week = delta.days // 7
        day_of_week = delta.days % 7
        
        return gps_week, day_of_week, date
    
    def analyze_data_availability(self, target_date):
        """Analyse la disponibilit√© des produits"""
        if isinstance(target_date, str):
            if '/' in target_date:
                date_obj = datetime.strptime(target_date, "%d/%m/%Y")
            else:
                date_obj = datetime.strptime(target_date, "%Y-%m-%d")
        else:
            date_obj = target_date
        
        now = datetime.now()
        time_diff = now - date_obj
        hours_elapsed = time_diff.total_seconds() / 3600
        
        analysis = {
            'date_requested': date_obj,
            'hours_elapsed': hours_elapsed,
            'optimal_product': None,
            'data_unavailable': False
        }
        
        if hours_elapsed >= self.availability_thresholds['final']:
            analysis['optimal_product'] = 'final'
        elif hours_elapsed >= self.availability_thresholds['rapid']:
            analysis['optimal_product'] = 'rapid'
        elif hours_elapsed >= self.availability_thresholds['ultra_rapid']:
            analysis['optimal_product'] = 'ultra_rapid'
        else:
            analysis['data_unavailable'] = True
        
        return analysis
    
    def generate_combined_sp3_filenames(self, target_date, product_type):
        """
        G√©n√®re les noms de fichiers SP3 R√âELLEMENT combin√©s GPS/GLONASS
        Cherche d'abord les produits multi-GNSS puis les produits IGS standard
        """
        gps_week, day_of_week, date_obj = self.date_to_gps_week(target_date)
        year = date_obj.year
        doy = date_obj.timetuple().tm_yday
        
        filenames = []
        
        # D√©terminer le format selon la semaine GPS
        use_new_format = gps_week >= 2238  # Transition novembre 2022
        
        if use_new_format:
            # Format moderne (depuis GPS Week 2238)
            if product_type == 'final':
                # 1. PRODUITS R√âELLEMENT COMBIN√âS GPS+GLONASS (MGEX/Centres sp√©cialis√©s)
                # COD (Center for Orbit Determination) - sp√©cialiste multi-GNSS
                filenames.append(f"COD0MGXFIN_{year}{doy:03d}0000_01D_05M_ORB.SP3.gz")  # Multi-GNSS 5min
                filenames.append(f"COD0MGXFIN_{year}{doy:03d}0000_01D_15M_ORB.SP3.gz")  # Multi-GNSS 15min
                
                # GFZ (GeoForschungsZentrum) - expert multi-constellation
                filenames.append(f"GFZ0MGXFIN_{year}{doy:03d}0000_01D_05M_ORB.SP3.gz")
                filenames.append(f"GFZ0MGXFIN_{year}{doy:03d}0000_01D_15M_ORB.SP3.gz")
                
                # WUM (Wuhan University) - sp√©cialiste BeiDou+Multi-GNSS
                filenames.append(f"WUM0MGXFIN_{year}{doy:03d}0000_01D_15M_ORB.SP3.gz")
                
                # 2. PRODUITS COMBIN√âS GPS+GLONASS sp√©cifiques
                for center in ['COD', 'GFZ', 'JPL']:
                    filenames.append(f"{center}0GRXFIN_{year}{doy:03d}0000_01D_15M_ORB.SP3.gz")  # GPS+GLONASS
                
                # 3. Produits IGS standard (GPS principalement) - en dernier recours
                filenames.append(f"IGS0OPSFIN_{year}{doy:03d}0000_01D_15M_ORB.SP3.gz")
                    
            elif product_type == 'rapid':
                # 1. PRODUITS RAPIDES MULTI-GNSS
                filenames.append(f"COD0MGXRAP_{year}{doy:03d}0000_01D_05M_ORB.SP3.gz")
                filenames.append(f"GFZ0MGXRAP_{year}{doy:03d}0000_01D_05M_ORB.SP3.gz")
                filenames.append(f"WUM0MGXRAP_{year}{doy:03d}0000_01D_15M_ORB.SP3.gz")
                
                # 2. PRODUITS RAPIDES GPS+GLONASS
                for center in ['COD', 'GFZ']:
                    filenames.append(f"{center}0GRXRAP_{year}{doy:03d}0000_01D_15M_ORB.SP3.gz")
                
                # 3. IGR Rapid standard
                filenames.append(f"IGS0OPSRAP_{year}{doy:03d}0000_01D_15M_ORB.SP3.gz")
                    
            elif product_type == 'ultra_rapid':
                # 1. PRODUITS ULTRA-RAPIDES MULTI-GNSS
                for hour in ['00', '06', '12', '18']:
                    filenames.append(f"COD0MGXULT_{year}{doy:03d}{hour}00_01D_05M_ORB.SP3.gz")
                    filenames.append(f"GFZ0MGXULT_{year}{doy:03d}{hour}00_01D_05M_ORB.SP3.gz")
                    
                    # 2. ULTRA-RAPIDES GPS+GLONASS
                    for center in ['COD', 'GFZ']:
                        filenames.append(f"{center}0GRXULT_{year}{doy:03d}{hour}00_01D_15M_ORB.SP3.gz")
                
                # 3. IGU Ultra-rapid standard
                for hour in ['00', '06', '12', '18']:
                    filenames.append(f"IGS0OPSULT_{year}{doy:03d}{hour}00_01D_15M_ORB.SP3.gz")
        
        else:
            # Format h√©rit√© (avant GPS Week 2238) - PRODUITS COMBIN√âS HISTORIQUES
            if product_type == 'final':
                # 1. Produits combin√©s historiques centres sp√©cialis√©s
                for center in ['cod', 'gfz', 'whu']:  # Centres multi-GNSS historiques
                    filenames.append(f"{center}{gps_week:04d}{day_of_week}.sp3.Z")
                
                # 2. Produits IGS standard historiques
                filenames.append(f"igs{gps_week:04d}{day_of_week}.sp3.Z")
                    
            elif product_type == 'rapid':
                # Produits rapides combin√©s historiques
                for center in ['cod', 'gfz']:
                    filenames.append(f"{center}r{gps_week:04d}{day_of_week}.sp3.Z")
                
                filenames.append(f"igr{gps_week:04d}{day_of_week}.sp3.Z")
                    
            elif product_type == 'ultra_rapid':
                # Ultra-rapides combin√©s historiques
                for hour in ['00', '06', '12', '18']:
                    for center in ['cod', 'gfz']:
                        filenames.append(f"{center}u{gps_week:04d}{day_of_week}_{hour}.sp3.Z")
                
                    filenames.append(f"igu{gps_week:04d}{day_of_week}_{hour}.sp3.Z")
        
        return filenames, gps_week, use_new_format
    
    def smart_download_sp3(self, target_date):
        """T√©l√©chargement intelligent avec s√©lection automatique du produit optimal"""
        try:
            availability = self.analyze_data_availability(target_date)
            
            if availability['data_unavailable']:
                print(f"‚ùå Aucun produit disponible (minimum 3h requis)")
                return None
            
            optimal_product = availability['optimal_product']
            print(f"üîç T√©l√©chargement {optimal_product.upper()}...")
            
            result = self.download_product_type(target_date, optimal_product)
            if result:
                print(f"‚úÖ Succ√®s {optimal_product.upper()}")
                return result
            else:
                print(f"‚ùå √âchec {optimal_product.upper()}")
                return None
            
        except Exception as e:
            logger.error(f"Erreur t√©l√©chargement: {str(e)}")
            return None
    
    def download_product_type(self, target_date, product_type):
        """T√©l√©charge un type de produit sp√©cifique"""
        try:
            filenames, gps_week, use_new_format = self.generate_combined_sp3_filenames(target_date, product_type)
            
            repositories = [
                f"{self.mgex_base}/{gps_week:04d}/",
                f"{self.cddis_base}/{gps_week:04d}/"
            ]
            
            for repo_url in repositories:
                for filename in filenames:
                    file_url = repo_url + filename
                    
                    try:
                        response = self.session.head(file_url, timeout=8)
                        
                        if response.status_code == 200:
                            print(f"   Trouv√©: {filename}")
                            return self.download_file(file_url, filename)
                        
                    except Exception:
                        continue
            
            return None
            
        except Exception as e:
            logger.error(f"Erreur download_product_type: {str(e)}")
            return None
    
    def search_broadcast_ephemeris(self, target_date):
        """Recherche les √©ph√©m√©rides de diffusion multi-GNSS (solution de secours)"""
        try:
            gps_week, day_of_week, date_obj = self.date_to_gps_week(target_date)
            year = date_obj.year
            doy = date_obj.timetuple().tm_yday
            
            print(f"üåê SOLUTION DE SECOURS: √âph√©m√©rides de diffusion")
            print(f"   üì° Constellations: GPS, GLONASS, Galileo, BeiDou, QZSS, SBAS")
            print(f"   ‚ö†Ô∏è Pr√©cision: 1-5 m√®tres (vs 2-3 cm pour SP3)")
            
            # Format moderne BRDM (Broadcast Multi-GNSS)
            filename = f"BRDM00DLR_S_{year}{doy:03d}0000_01D_MN.rnx.gz"
            
            # URLs prioritaires pour √©ph√©m√©rides
            urls_to_test = [
                f"{self.broadcast_base}/{year}/brdc/{filename}",
                f"{self.broadcast_base}/{year}/{doy:03d}/{year-2000:02d}p/{filename}"
            ]
            
            for i, url in enumerate(urls_to_test):
                try:
                    logger.info(f"Test √©ph√©m√©rides {i+1}: {url}")
                    response = self.session.head(url, timeout=15)
                    
                    if response.status_code == 200:
                        file_size = response.headers.get('content-length', 'Inconnu')
                        print(f"‚úÖ √âph√©m√©rides de diffusion disponibles: {filename}")
                        print(f"   üíæ Taille: {file_size} octets")
                        print(f"   üéØ Type: Donn√©es temps r√©el multi-GNSS RINEX")
                        
                        return self.download_file(url, filename)
                        
                except Exception as e:
                    logger.warning(f"Erreur test √©ph√©m√©rides {url}: {str(e)}")
                    continue
            
            print(f"‚ùå Aucune √©ph√©m√©rides de diffusion trouv√©e")
            print(f"üí° Sugg√©rer de r√©essayer plus tard ou contacter support CDDIS")
            return None
            
        except Exception as e:
            logger.error(f"Erreur recherche √©ph√©m√©rides: {str(e)}")
            return None
    
    def download_file(self, file_url, filename):
        """T√©l√©charge un fichier"""
        try:
            response = self.session.get(file_url, stream=True, timeout=120)
            response.raise_for_status()
            
            output_path = self.output_dir / filename
            
            with open(output_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
            
            # D√©compression automatique
            if filename.endswith('.gz'):
                return self.decompress_file(output_path)
            elif filename.endswith('.Z'):
                return self.decompress_unix_z(output_path)
            
            return str(output_path)
                    
        except Exception as e:
            logger.error(f"Erreur t√©l√©chargement {filename}: {str(e)}")
            return None
    
    def decompress_file(self, compressed_path):
        """D√©compresse un fichier .gz avec gestion d'erreurs"""
        try:
            decompressed_path = compressed_path.with_suffix('')
            print(f"üì¶ D√©compression gzip: {decompressed_path.name}")
            
            with gzip.open(compressed_path, 'rb') as f_in:
                with open(decompressed_path, 'wb') as f_out:
                    f_out.write(f_in.read())
            
            # Supprimer le fichier compress√© pour √©conomiser l'espace
            compressed_path.unlink()
            
            size = decompressed_path.stat().st_size
            print(f"‚úÖ D√©compression r√©ussie: {size:,} octets")
            return str(decompressed_path)
            
        except Exception as e:
            logger.error(f"Erreur d√©compression gzip: {str(e)}")
            return str(compressed_path)
    
    def decompress_unix_z(self, compressed_path):
        """D√©compresse un fichier .Z (Unix compress)"""
        try:
            import subprocess
            decompressed_path = compressed_path.with_suffix('')
            print(f"üì¶ D√©compression Unix .Z: {decompressed_path.name}")
            
            # Essayer la commande uncompress
            result = subprocess.run(['uncompress', str(compressed_path)], 
                                  capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0 and decompressed_path.exists():
                size = decompressed_path.stat().st_size
                print(f"‚úÖ D√©compression Unix r√©ussie: {size:,} octets")
                return str(decompressed_path)
            else:
                print(f"‚ö†Ô∏è D√©compression Unix √©chou√©e, fichier gard√© compress√©")
                return str(compressed_path)
                
        except Exception as e:
            logger.warning(f"Erreur d√©compression Unix: {str(e)}")
            print(f"‚ö†Ô∏è Fichier gard√© compress√©: {compressed_path}")
            return str(compressed_path)
    
    def analyze_sp3_file(self, file_path):
        """Analyse factuelle d'un fichier SP3"""
        try:
            print(f"\nüìä ANALYSE FICHIER SP3")
            print(f"üìÅ {Path(file_path).name}")
            
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                lines = f.readlines()
            
            satellites = {}
            constellations = set()
            all_satellites = set()
            
            for line in lines[:200]:
                if line.startswith('+'):
                    sat_section = line[9:].strip()
                    pos = 0
                    while pos < len(sat_section):
                        if pos + 2 < len(sat_section):
                            sat_id = sat_section[pos:pos+3]
                            if len(sat_id) == 3 and sat_id[0].isalpha() and sat_id[1:].isdigit():
                                constellation = sat_id[0].upper()
                                constellations.add(constellation)
                                all_satellites.add(sat_id)
                                if constellation not in satellites:
                                    satellites[constellation] = set()
                                satellites[constellation].add(sat_id)
                        pos += 3
            
            constellation_names = {
                'G': 'GPS', 'R': 'GLONASS', 'E': 'Galileo', 
                'C': 'BeiDou', 'J': 'QZSS', 'S': 'SBAS'
            }
            
            file_size = Path(file_path).stat().st_size
            total_satellites = len(all_satellites)
            
            print(f"üíæ Taille: {file_size / (1024*1024):.2f} MB")
            print(f"üõ∞Ô∏è Satellites: {total_satellites}")
            print(f"üåê Constellations: {len(constellations)}")
            
            for const_code in sorted(constellations):
                const_name = constellation_names.get(const_code, f'Constellation {const_code}')
                sat_count = len(satellites.get(const_code, []))
                print(f"   {const_name}: {sat_count}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur analyse: {str(e)}")
            return False

def main():
    """Script principal avec saisie directe de la date"""
    
    # Configuration avec token JWT valide
    JWT_TOKEN = "eyJ0eXAiOiJKV1QiLCJvcmlnaW4iOiJFYXJ0aGRhdGEgTG9naW4iLCJzaWciOiJlZGxqd3RwdWJrZXlfb3BzIiwiYWxnIjoiUlMyNTYifQ.eyJ0eXBlIjoiVXNlciIsInVpZCI6ImEubWV1bmllciIsImV4cCI6MTc1NzYzNjk3NSwiaWF0IjoxNzUyNDUyOTc1LCJpc3MiOiJodHRwczovL3Vycy5lYXJ0aGRhdGEubmFzYS5nb3YiLCJpZGVudGl0eV9wcm92aWRlciI6ImVkbF9vcHMiLCJhY3IiOiJlZGwiLCJhc3N1cmFuY2VfbGV2ZWwiOjN9.nAL8KSU_RDW9ldNEhT-EAbdEZagLNLTeOD_VYq9Bas-UcRSaempBuZ3RiFyX18q7I0fV2bUiLTKV-ME-Ra_yyU_ODT76GNvx48v9QWMB_rzY3W9gXgeyoG05bqgauZJGpLiHyxkMozHLClG_JT23Pcsjmk1dXliW6bW58-vYZnUmKe2mXxDGdbUUfIM6D3mjHbijXQ_MSYZtyxeb9fxcPIfqFTUMmlQ90QqcxSahp2rDLDZBRdxauj0c9xPrsq_SlDoGGJcWx0qDuBz0Z2VkFP3cBJsoFIEhRQrccIn5v9Ykqdr9s224bEWkQGT8dDrO_Rv2rhr6RcFZLYVfwMQURQ"
    
    # R√âPERTOIRE DE SORTIE SP√âCIFIQUE
    OUTPUT_DIRECTORY = r"C:\1-Data\01-Projet\ProjetPY\Test_GNSS"
    
    today = datetime.now()
    
    try:
        print("=" * 80)
        print("T√âL√âCHARGEUR SP3 INTELLIGENT - PRODUITS COMBIN√âS GPS/GLONASS V2.1")
        print("Logique optimis√©e: IGS Final ‚Üí IGR Rapid ‚Üí IGU Ultra-rapid")
        print("=" * 80)
        
        print(f"\nüìÅ R√âPERTOIRE DE SORTIE: {OUTPUT_DIRECTORY}")
        
        # V√©rifier et cr√©er le r√©pertoire de sortie
        output_path = Path(OUTPUT_DIRECTORY)
        if not output_path.exists():
            try:
                output_path.mkdir(parents=True, exist_ok=True)
                print(f"‚úÖ R√©pertoire cr√©√© avec succ√®s")
            except Exception as e:
                print(f"‚ùå Impossible de cr√©er le r√©pertoire: {e}")
                return
        else:
            print(f"‚úÖ R√©pertoire existe d√©j√†")
        
        # V√©rifier les permissions d'√©criture
        try:
            test_file = output_path / "test_permissions.tmp"
            with open(test_file, 'w') as f:
                f.write("test")
            test_file.unlink()
            print(f"‚úÖ Permissions d'√©criture v√©rifi√©es")
        except Exception as e:
            print(f"‚ùå Probl√®me de permissions d'√©criture: {e}")
            return
        
        print(f"\nüïê Date et heure actuelles: {today.strftime('%d/%m/%Y √† %H:%M:%S UTC')}")
        print(f"\nüìã SEUILS DE DISPONIBILIT√â DES PRODUITS:")
        print(f"   üéØ IGS Final: ‚â• 12 jours (pr√©cision 2-3 cm) - PRIORIT√â 1")
        print(f"   ‚ö° IGR Rapid: ‚â• 1 jour (pr√©cision 2,5 cm) - PRIORIT√â 2")
        print(f"   üöÄ IGU Ultra-rapid: ‚â• 3 heures (pr√©cision 3-5 cm) - PRIORIT√â 3")
        
        print(f"\nüìÖ EXEMPLES DE DATES ET PRODUITS ATTENDUS:")
        print(f"   ‚Ä¢ {(today - timedelta(days=15)).strftime('%d/%m/%Y')} ‚Üí IGS Final disponible (optimal)")
        print(f"   ‚Ä¢ {(today - timedelta(days=2)).strftime('%d/%m/%Y')} ‚Üí IGR Rapid disponible")
        print(f"   ‚Ä¢ {(today - timedelta(hours=6)).strftime('%d/%m/%Y')} ‚Üí IGU Ultra-rapid disponible")
        print(f"   ‚Ä¢ {today.strftime('%d/%m/%Y')} ‚Üí Aucun produit disponible")
        
        # Saisie directe de la date
        print(f"\n" + "=" * 60)
        while True:
            target_date = input("üìÖ Entrez la date souhait√©e (DD/MM/YYYY): ").strip()
            
            if not target_date:
                print("‚ùå Veuillez entrer une date.")
                continue
                
            try:
                # Validation du format de date
                date_obj = datetime.strptime(target_date, "%d/%m/%Y")
                
                # V√©rification que la date n'est pas dans le futur
                if date_obj > today:
                    print(f"‚ùå Date dans le futur! La date doit √™tre ant√©rieure √† {today.strftime('%d/%m/%Y')}")
                    continue
                
                # V√©rification que la date n'est pas trop ancienne (>5 ans)
                five_years_ago = today - timedelta(days=5*365)
                if date_obj < five_years_ago:
                    print(f"‚ö†Ô∏è Date tr√®s ancienne (>{five_years_ago.strftime('%d/%m/%Y')}). Les donn√©es peuvent ne plus √™tre disponibles.")
                    confirm = input("Continuer quand m√™me? (o/n): ").strip().lower()
                    if confirm not in ['o', 'oui', 'y', 'yes']:
                        continue
                
                print(f"‚úÖ Date valid√©e: {target_date}")
                break
                
            except ValueError:
                print("‚ùå Format de date invalide. Utilisez le format DD/MM/YYYY")
                print("   Exemples valides: 16/06/2025, 01/12/2024, 25/03/2023")
                continue
        
        # Initialiser le t√©l√©chargeur avec le r√©pertoire sp√©cifique
        print(f"\nüîß Initialisation du t√©l√©chargeur...")
        downloader = SP3CombinedDownloader(JWT_TOKEN, output_dir=OUTPUT_DIRECTORY)
        print(f"‚úÖ Configuration termin√©e")
        print(f"üìÇ Fichiers seront sauvegard√©s dans: {OUTPUT_DIRECTORY}")
        
        # Lancement du t√©l√©chargement intelligent
        print(f"\nüöÄ D√âBUT DU PROCESSUS DE T√âL√âCHARGEMENT")
        print("=" * 60)
        
        downloaded_file = downloader.smart_download_sp3(target_date)
        
        if downloaded_file:
            print(f"\nüéâ T√âL√âCHARGEMENT R√âUSSI!")
            print("=" * 60)
            print(f"üìÅ Fichier t√©l√©charg√©: {Path(downloaded_file).name}")
            print(f"üìÇ Chemin complet: {downloaded_file}")
            print(f"üíæ Taille: {Path(downloaded_file).stat().st_size / (1024*1024):.2f} MB")
            
            # V√©rifier que le fichier existe bien
            if Path(downloaded_file).exists():
                print(f"‚úÖ Fichier confirm√© √† l'emplacement: {downloaded_file}")
            else:
                print(f"‚ùå ATTENTION: Fichier introuvable √† l'emplacement indiqu√©!")
            
            # Analyse d√©taill√©e automatique
            print(f"\nüîç Lancement de l'analyse d√©taill√©e...")
            analysis_success = downloader.analyze_sp3_file(downloaded_file)
            
            if analysis_success:
                print(f"\nüí° FICHIER PR√äT POUR UTILISATION")
                print("=" * 60)
                print(f"üéØ Applications recommand√©es:")
                print(f"   ‚Ä¢ Positionnement pr√©cis (PPP, RTK)")
                print(f"   ‚Ä¢ G√©od√©sie et cartographie haute pr√©cision")
                print(f"   ‚Ä¢ Navigation scientifique")
                print(f"   ‚Ä¢ Surveillance g√©ophysique")
                print(f"\nüåç Avantages multi-constellation:")
                print(f"   ‚Ä¢ Couverture mondiale optimis√©e")
                print(f"   ‚Ä¢ G√©om√©trie satellite sup√©rieure")
                print(f"   ‚Ä¢ Convergence rapide des solutions")
                print(f"   ‚Ä¢ Robustesse en environnement d√©grad√©")
                
                print(f"\nüìÅ LOCALISATION FINALE:")
                print(f"   üìÇ Dossier: {OUTPUT_DIRECTORY}")
                print(f"   üìÑ Fichier: {Path(downloaded_file).name}")
            
        else:
            print(f"\n‚ùå T√âL√âCHARGEMENT √âCHOU√â")
            print("=" * 60)
            print(f"üí° Suggestions de d√©pannage:")
            print(f"   1. V√©rifiez que la date respecte les seuils de disponibilit√©")
            print(f"   2. Essayez une date plus ancienne (>15 jours pour IGS Final)")
            print(f"   3. V√©rifiez votre connexion internet")
            print(f"   4. Les serveurs CDDIS peuvent √™tre temporairement indisponibles")
            print(f"   5. Contactez le support NASA Earthdata si le probl√®me persiste")
            
            print(f"\nüîÑ Options de r√©cup√©ration:")
            print(f"   ‚Ä¢ Relancer avec une date plus ancienne")
            print(f"   ‚Ä¢ Utiliser les √©ph√©m√©rides de diffusion (pr√©cision r√©duite)")
            print(f"   ‚Ä¢ Attendre la disponibilit√© des produits plus r√©cents")
        
        print(f"\n" + "=" * 80)
        print(f"T√©l√©chargeur SP3 - Session termin√©e √† {datetime.now().strftime('%H:%M:%S')}")
        print("=" * 80)
        
    except KeyboardInterrupt:
        print(f"\n\n‚è∏Ô∏è INTERRUPTION UTILISATEUR")
        print(f"Session termin√©e par l'utilisateur")
    except Exception as e:
        logger.error(f"Erreur dans le script principal: {str(e)}")
        print(f"\n‚ùå ERREUR CRITIQUE: {str(e)}")
        print(f"üí° Contactez le support technique si le probl√®me persiste")
        
        # Initialiser le t√©l√©chargeur avec configuration optimis√©e
        print(f"\nüîß Initialisation du t√©l√©chargeur...")
        downloader = SP3CombinedDownloader(JWT_TOKEN)
        print(f"‚úÖ Configuration termin√©e")
        
        # Lancement du t√©l√©chargement intelligent
        print(f"\nüöÄ D√âBUT DU PROCESSUS DE T√âL√âCHARGEMENT")
        print("=" * 60)
        
        downloaded_file = downloader.smart_download_sp3(target_date)
        
        if downloaded_file:
            print(f"\nüéâ T√âL√âCHARGEMENT R√âUSSI!")
            print("=" * 60)
            print(f"üìÅ Fichier t√©l√©charg√©: {Path(downloaded_file).name}")
            print(f"üìÇ Chemin complet: {downloaded_file}")
            print(f"üíæ Taille: {Path(downloaded_file).stat().st_size / (1024*1024):.2f} MB")
            
            # Analyse d√©taill√©e automatique
            print(f"\nüîç Lancement de l'analyse d√©taill√©e...")
            analysis_success = downloader.analyze_sp3_file(downloaded_file)
            
            if analysis_success:
                print(f"\nüí° FICHIER PR√äT POUR UTILISATION")
                print("=" * 60)
                print(f"üéØ Applications recommand√©es:")
                print(f"   ‚Ä¢ Positionnement pr√©cis (PPP, RTK)")
                print(f"   ‚Ä¢ G√©od√©sie et cartographie haute pr√©cision")
                print(f"   ‚Ä¢ Navigation scientifique")
                print(f"   ‚Ä¢ Surveillance g√©ophysique")
                print(f"\nüåç Avantages multi-constellation:")
                print(f"   ‚Ä¢ Couverture mondiale optimis√©e")
                print(f"   ‚Ä¢ G√©om√©trie satellite sup√©rieure")
                print(f"   ‚Ä¢ Convergence rapide des solutions")
                print(f"   ‚Ä¢ Robustesse en environnement d√©grad√©")
            
        else:
            print(f"\n‚ùå T√âL√âCHARGEMENT √âCHOU√â")
            print("=" * 60)
            print(f"üí° Suggestions de d√©pannage:")
            print(f"   1. V√©rifiez que la date respecte les seuils de disponibilit√©")
            print(f"   2. Essayez une date plus ancienne (>15 jours pour IGS Final)")
            print(f"   3. V√©rifiez votre connexion internet")
            print(f"   4. Les serveurs CDDIS peuvent √™tre temporairement indisponibles")
            print(f"   5. Contactez le support NASA Earthdata si le probl√®me persiste")
            
            print(f"\nüîÑ Options de r√©cup√©ration:")
            print(f"   ‚Ä¢ Relancer avec une date plus ancienne")
            print(f"   ‚Ä¢ Utiliser les √©ph√©m√©rides de diffusion (pr√©cision r√©duite)")
            print(f"   ‚Ä¢ Attendre la disponibilit√© des produits plus r√©cents")
        
        print(f"\n" + "=" * 80)
        print(f"T√©l√©chargeur SP3 - Session termin√©e √† {datetime.now().strftime('%H:%M:%S')}")
        print("=" * 80)
        
    except KeyboardInterrupt:
        print(f"\n\n‚è∏Ô∏è INTERRUPTION UTILISATEUR")
        print(f"Session termin√©e par l'utilisateur")
    except Exception as e:
        logger.error(f"Erreur dans le script principal: {str(e)}")
        print(f"\n‚ùå ERREUR CRITIQUE: {str(e)}")
        print(f"üí° Contactez le support technique si le probl√®me persiste")
        
        # Initialiser le t√©l√©chargeur avec configuration optimis√©e
        print(f"\nüîß Initialisation du t√©l√©chargeur...")
        downloader = SP3CombinedDownloader(JWT_TOKEN)
        print(f"‚úÖ Configuration termin√©e")
        
        # Lancement du t√©l√©chargement intelligent
        print(f"\nüöÄ D√âBUT DU PROCESSUS DE T√âL√âCHARGEMENT")
        print("=" * 60)
        
        downloaded_file = downloader.smart_download_sp3(target_date)
        
        if downloaded_file:
            print(f"\nüéâ T√âL√âCHARGEMENT R√âUSSI!")
            print("=" * 60)
            print(f"üìÅ Fichier t√©l√©charg√©: {Path(downloaded_file).name}")
            print(f"üìÇ Chemin complet: {downloaded_file}")
            print(f"üíæ Taille: {Path(downloaded_file).stat().st_size / (1024*1024):.2f} MB")
            
            # Analyse d√©taill√©e automatique
            print(f"\nüîç Lancement de l'analyse d√©taill√©e...")
            analysis_success = downloader.analyze_sp3_file(downloaded_file)
            
            if analysis_success:
                print(f"\nüí° FICHIER PR√äT POUR UTILISATION")
                print("=" * 60)
                print(f"üéØ Applications recommand√©es:")
                print(f"   ‚Ä¢ Positionnement pr√©cis (PPP, RTK)")
                print(f"   ‚Ä¢ G√©od√©sie et cartographie haute pr√©cision")
                print(f"   ‚Ä¢ Navigation scientifique")
                print(f"   ‚Ä¢ Surveillance g√©ophysique")
                print(f"\nüåç Avantages multi-constellation:")
                print(f"   ‚Ä¢ Couverture mondiale optimis√©e")
                print(f"   ‚Ä¢ G√©om√©trie satellite sup√©rieure")
                print(f"   ‚Ä¢ Convergence rapide des solutions")
                print(f"   ‚Ä¢ Robustesse en environnement d√©grad√©")
            
        else:
            print(f"\n‚ùå T√âL√âCHARGEMENT √âCHOU√â")
            print("=" * 60)
            print(f"üí° Suggestions de d√©pannage:")
            print(f"   1. V√©rifiez que la date respecte les seuils de disponibilit√©")
            print(f"   2. Essayez une date plus ancienne (>15 jours pour IGS Final)")
            print(f"   3. V√©rifiez votre connexion internet")
            print(f"   4. Les serveurs CDDIS peuvent √™tre temporairement indisponibles")
            print(f"   5. Contactez le support NASA Earthdata si le probl√®me persiste")
            
            print(f"\nüîÑ Options de r√©cup√©ration:")
            print(f"   ‚Ä¢ Relancer avec une date plus ancienne")
            print(f"   ‚Ä¢ Utiliser les √©ph√©m√©rides de diffusion (pr√©cision r√©duite)")
            print(f"   ‚Ä¢ Attendre la disponibilit√© des produits plus r√©cents")
        
        print(f"\n" + "=" * 80)
        print(f"T√©l√©chargeur SP3 - Session termin√©e √† {datetime.now().strftime('%H:%M:%S')}")
        print("=" * 80)
        
    except KeyboardInterrupt:
        print(f"\n\n‚è∏Ô∏è INTERRUPTION UTILISATEUR")
        print(f"Session termin√©e par l'utilisateur")
    except Exception as e:
        logger.error(f"Erreur dans le script principal: {str(e)}")
        print(f"\n‚ùå ERREUR CRITIQUE: {str(e)}")
        print(f"üí° Contactez le support technique si le probl√®me persiste")

if __name__ == "__main__":
    main()