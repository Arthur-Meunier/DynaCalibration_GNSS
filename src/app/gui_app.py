# -*- coding: utf-8 -*-
"""
Created on Wed Jul 16 01:46:46 2025

@author: a.meunier
"""

# src/app/gui_app.py
"""
Application principale GUI pour la calibration des capteurs de navigation.

Cette application fournit une interface graphique compl√®te pour :
- Configuration des points DIMCON
- Import et traitement des donn√©es GNSS  
- Import et analyse des donn√©es d'observation (MRU, Compas, Octans)
- Calcul des transformations et matrices de rotation
- Affichage des r√©sultats et export des rapports
"""

import sys
import os
from pathlib import Path
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QStackedWidget, QHBoxLayout, 
    QWidget, QMessageBox, QSplashScreen, QLabel
)
from PyQt5.QtCore import Qt, QTimer, QThread, pyqtSignal
from PyQt5.QtGui import QFont, QPixmap, QPainter

# Imports des modules de l'application
from .gui.menu_vertical import VerticalMenu
from .gui.page_accueil import HomePageWidget
from .gui.page_dimcon import DimconWidget
from .gui.page_gnss import GnssWidget
from .gui.page_observation import ObservationWidget
from .gui.app_data import ApplicationData

class MainWindow(QMainWindow):
    """
    Fen√™tre principale de l'application de calibration.
    
    Int√®gre tous les modules dans une interface unifi√©e avec navigation
    par menu vertical et gestion centralis√©e des donn√©es.
    """
    
    def __init__(self):
        super().__init__()
        
        # Configuration de base
        self.setWindowTitle("Calibration Navigation - Capteurs GNSS/IMU v1.0")
        self.setGeometry(100, 100, 1600, 1000)
        self.setMinimumSize(1200, 800)
        
        # Mod√®le de donn√©es central - CRITIQUE pour le fonctionnement
        print("üîß Initialisation du mod√®le de donn√©es central...")
        self.app_data = ApplicationData()
        
        # Interface utilisateur
        self.setup_ui()
        
        # Th√®me et styles
        self.apply_application_theme()
        
        # Connexions de signaux
        self.setup_connections()
        
        print("‚úÖ Application principale initialis√©e")
    
    def setup_ui(self):
        """Configure l'interface utilisateur principale."""
        # Widget central
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout principal horizontal
        main_layout = QHBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        
        # Menu vertical de navigation
        print("üîß Cr√©ation du menu de navigation...")
        self.menu = VerticalMenu(self)
        self.menu.setFixedWidth(280)
        main_layout.addWidget(self.menu)
        
        # Zone de contenu principal avec pages empil√©es
        print("üîß Configuration de la zone de contenu...")
        self.content_area = QStackedWidget()
        main_layout.addWidget(self.content_area)
        
        # Cr√©er et configurer toutes les pages
        self.setup_all_pages()
    
    def setup_all_pages(self):
        """
        Cr√©e et configure toutes les pages de l'application.
        
        IMPORTANT: L'ordre d'ajout doit correspondre aux indices
        utilis√©s dans le menu vertical.
        """
        
        # Page 0: Accueil
        print("üîß Configuration page Accueil...")
        home_page = HomePageWidget()
        self.content_area.addWidget(home_page)
        
        # Page 1: Dimcon (Points de r√©f√©rence du navire)
        print("üîß Configuration page Dimcon...")
        try:
            dimcon_page = DimconWidget()
            dimcon_page.set_data_model(self.app_data)
            self.content_area.addWidget(dimcon_page)
            print("‚úÖ Page Dimcon configur√©e")
        except Exception as e:
            print(f"‚ùå Erreur page Dimcon: {e}")
            # Page de fallback
            fallback_page = QWidget()
            fallback_label = QLabel(f"Erreur chargement Dimcon: {e}")
            fallback_label.setStyleSheet("color: red; padding: 20px;")
            fallback_layout = QHBoxLayout(fallback_page)
            fallback_layout.addWidget(fallback_label)
            self.content_area.addWidget(fallback_page)
        
        # Page 2: GNSS (Configuration et donn√©es GNSS)
        print("üîß Configuration page GNSS...")
        try:
            gnss_page = GnssWidget()
            gnss_page.set_data_model(self.app_data)
            self.content_area.addWidget(gnss_page)
            print("‚úÖ Page GNSS configur√©e")
        except Exception as e:
            print(f"‚ùå Erreur page GNSS: {e}")
            # Page de fallback
            fallback_page = QWidget()
            fallback_label = QLabel(f"Erreur chargement GNSS: {e}")
            fallback_label.setStyleSheet("color: red; padding: 20px;")
            fallback_layout = QHBoxLayout(fallback_page)
            fallback_layout.addWidget(fallback_label)
            self.content_area.addWidget(fallback_page)
        
        # Page 3: Observation (Capteurs MRU, Compas, Octans)
        print("üîß Configuration page Observation...")
        try:
            observation_page = ObservationWidget()
            observation_page.set_data_model(self.app_data)
            self.content_area.addWidget(observation_page)
            print("‚úÖ Page Observation configur√©e")
        except Exception as e:
            print(f"‚ùå Erreur page Observation: {e}")
            import traceback
            traceback.print_exc()
            # Page de fallback
            fallback_page = QWidget()
            fallback_label = QLabel(f"Erreur chargement Observation:\n{e}\n\nV√©rifiez les imports des modules de calcul.")
            fallback_label.setStyleSheet("color: red; padding: 20px;")
            fallback_label.setWordWrap(True)
            fallback_layout = QHBoxLayout(fallback_page)
            fallback_layout.addWidget(fallback_label)
            self.content_area.addWidget(fallback_page)
        
        # Page 4: R√©sultats (Analyse et export)
        print("üîß Configuration page R√©sultats...")
        results_page = self.create_results_page()
        self.content_area.addWidget(results_page)
        
        print(f"‚úÖ {self.content_area.count()} pages configur√©es")
    
    def create_results_page(self):
        """
        Cr√©e la page des r√©sultats (placeholder pour l'instant).
        
        Returns:
            QWidget: Page des r√©sultats
        """
        results_page = QWidget()
        results_layout = QHBoxLayout(results_page)
        
        results_label = QLabel("""
        üìä PAGE R√âSULTATS
        
        Cette page affichera :
        ‚Ä¢ Synth√®se des donn√©es import√©es
        ‚Ä¢ Matrices de transformation calcul√©es  
        ‚Ä¢ M√©triques de qualit√©
        ‚Ä¢ Export des rapports
        
        üöß En cours de d√©veloppement...
        """)
        
        results_label.setStyleSheet("""
            color: white;
            font-size: 14px;
            padding: 20px;
            background-color: #353535;
            border-radius: 5px;
            margin: 20px;
        """)
        results_label.setAlignment(Qt.AlignCenter)
        
        results_layout.addWidget(results_label)
        return results_page
    
    def setup_connections(self):
        """Configure les connexions de signaux entre composants."""
        
        # Connexion des signaux de changement de donn√©es
        if hasattr(self.app_data, 'data_changed'):
            self.app_data.data_changed.connect(self.on_data_changed)
            print("‚úÖ Signaux de donn√©es connect√©s")
        
        # Autres connexions peuvent √™tre ajout√©es ici
    
    def on_data_changed(self, section):
        """
        Gestionnaire pour les changements de donn√©es.
        
        Args:
            section (str): Section des donn√©es qui a chang√©
        """
        print(f"üìä Donn√©es mises √† jour: {section}")
        
        # Ici on peut ajouter la logique pour :
        # - Sauvegarder automatiquement
        # - Mettre √† jour d'autres vues
        # - Recalculer des r√©sultats
        # - etc.
    
    def apply_application_theme(self):
        """Applique le th√®me sombre coh√©rent √† toute l'application."""
        
        app_style = """
        QMainWindow {
            background-color: #2d2d30;
            color: white;
        }
        
        QWidget {
            background-color: #2d2d30;
            color: white;
            font-family: 'Segoe UI', Arial, sans-serif;
            font-size: 11px;
        }
        
        QStackedWidget {
            background-color: #3a3a3d;
            border: none;
        }
        
        /* Barres de d√©filement */
        QScrollBar:vertical {
            background-color: #404040;
            width: 12px;
            border-radius: 6px;
        }
        
        QScrollBar::handle:vertical {
            background-color: #8e44ad;
            border-radius: 6px;
            min-height: 20px;
        }
        
        QScrollBar::handle:vertical:hover {
            background-color: #9b59b6;
        }
        
        /* Messages d'erreur et info */
        QMessageBox {
            background-color: #2d2d30;
            color: white;
        }
        
        QMessageBox QLabel {
            color: white;
        }
        
        QMessageBox QPushButton {
            background-color: #8e44ad;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 16px;
            font-weight: bold;
            min-width: 80px;
        }
        
        QMessageBox QPushButton:hover {
            background-color: #9b59b6;
        }
        """
        
        self.setStyleSheet(app_style)
        print("‚úÖ Th√®me appliqu√©")
    
    def closeEvent(self, event):
        """
        Gestionnaire de fermeture de l'application.
        
        Propose de sauvegarder les donn√©es avant fermeture.
        """
        reply = QMessageBox.question(
            self,
            "Fermeture de l'application",
            "Voulez-vous sauvegarder les donn√©es avant de quitter ?",
            QMessageBox.Save | QMessageBox.Discard | QMessageBox.Cancel,
            QMessageBox.Save
        )
        
        if reply == QMessageBox.Save:
            # TODO: Impl√©menter la sauvegarde
            print("üíæ Sauvegarde des donn√©es...")
            event.accept()
        elif reply == QMessageBox.Discard:
            print("üö™ Fermeture sans sauvegarde")
            event.accept()
        else:
            event.ignore()

class SplashScreen(QSplashScreen):
    """√âcran de d√©marrage pour l'application."""
    
    def __init__(self):
        # Cr√©er un pixmap simple pour le splash screen
        pixmap = QPixmap(400, 200)
        pixmap.fill(Qt.black)
        
        super().__init__(pixmap)
        
        # Ajouter du texte
        painter = QPainter(pixmap)
        painter.setPen(Qt.white)
        painter.setFont(QFont("Arial", 16, QFont.Bold))
        painter.drawText(pixmap.rect(), Qt.AlignCenter, 
                        "Calibration Navigation\n\nChargement...")
        painter.end()
        
        self.setPixmap(pixmap)

def main():
    """
    Point d'entr√©e principal de l'application GUI.
    
    Configure l'application Qt, affiche l'√©cran de d√©marrage,
    puis lance la fen√™tre principale.
    """
    
    # Cr√©ation de l'application Qt
    app = QApplication(sys.argv)
    
    # Configuration de l'application
    app.setApplicationName("Calibration Navigation")
    app.setApplicationVersion("1.0.0")
    app.setOrganizationName("Navigation Systems")
    app.setOrganizationDomain("navigation-systems.com")
    
    # √âcran de d√©marrage
    splash = SplashScreen()
    splash.show()
    splash.showMessage("Initialisation des modules...", Qt.AlignBottom | Qt.AlignCenter, Qt.white)
    
    # Traitement des √©v√©nements pendant le chargement
    app.processEvents()
    
    try:
        # Cr√©ation de la fen√™tre principale
        splash.showMessage("Cr√©ation de l'interface...", Qt.AlignBottom | Qt.AlignCenter, Qt.white)
        app.processEvents()
        
        window = MainWindow()
        
        # Fermer le splash et afficher la fen√™tre
        splash.finish(window)
        window.show()
        
        print("üöÄ Application d√©marr√©e avec succ√®s")
        
        # Lancement de la boucle √©v√©nementielle
        sys.exit(app.exec_())
        
    except Exception as e:
        splash.close()
        
        # Afficher l'erreur
        error_msg = f"Erreur critique lors du d√©marrage:\n\n{str(e)}"
        print(f"‚ùå {error_msg}")
        
        # Bo√Æte de dialogue d'erreur
        error_app = QApplication(sys.argv) if not app else app
        QMessageBox.critical(None, "Erreur de d√©marrage", error_msg)
        
        import traceback
        traceback.print_exc()
        
        sys.exit(1)

if __name__ == "__main__":
    main()


# =============================================================================
# FICHIER DE LANCEMENT PRINCIPAL : src/main.py
# =============================================================================

# src/main.py
#!/usr/bin/env python3
"""
Point d'entr√©e principal de l'application de calibration des capteurs.

Ce script configure l'environnement Python et lance l'application GUI.
Il peut √™tre ex√©cut√© directement ou utilis√© comme module.

Usage:
    python src/main.py
    ou
    python -m src.main
"""

import sys
import os
from pathlib import Path

def setup_python_path():
    """
    Configure le PYTHONPATH pour permettre les imports relatifs.
    
    Ajoute le r√©pertoire racine du projet au sys.path pour que
    les imports depuis src/ fonctionnent correctement.
    """
    # R√©pertoire du script actuel
    current_file = Path(__file__).resolve()
    
    # R√©pertoire racine du projet (parent de src/)
    project_root = current_file.parent.parent
    
    # R√©pertoire src/
    src_dir = current_file.parent
    
    # Ajouter au PYTHONPATH
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))
    
    if str(src_dir) not in sys.path:
        sys.path.insert(0, str(src_dir))
    
    print(f"üìÅ R√©pertoire projet: {project_root}")
    print(f"üìÅ R√©pertoire src: {src_dir}")
    
    return project_root, src_dir

def check_dependencies():
    """
    V√©rifie que toutes les d√©pendances sont install√©es.
    
    Returns:
        bool: True si toutes les d√©pendances sont disponibles
    """
    required_packages = [
        'PyQt5',
        'numpy', 
        'pandas',
        'scipy',
        'matplotlib',
        'pyqtgraph'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package}")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è Packages manquants: {', '.join(missing_packages)}")
        print(f"üí° Installez avec: pip install {' '.join(missing_packages)}")
        return False
    
    print("‚úÖ Toutes les d√©pendances sont disponibles")
    return True

def main():
    """Fonction principale."""
    
    print("=" * 60)
    print("üõ∞Ô∏è CALIBRATION NAVIGATION - D√âMARRAGE")
    print("=" * 60)
    
    # Configuration des chemins
    print("\nüîß Configuration de l'environnement...")
    project_root, src_dir = setup_python_path()
    
    # V√©rification des d√©pendances
    print("\nüîç V√©rification des d√©pendances...")
    if not check_dependencies():
        print("\n‚ùå Impossible de d√©marrer - d√©pendances manquantes")
        sys.exit(1)
    
    # Test des imports critiques
    print("\nüîç Test des imports critiques...")
    try:
        # Test import du module GUI principal
        from app.gui_app import main as gui_main
        print("‚úÖ Module GUI principal")
        
        # Test import des modules de base
        from app.gui.app_data import ApplicationData
        print("‚úÖ Mod√®le de donn√©es")
        
        # Test import des calculateurs
        from app.core.calculations.calculs_observation import ObservationCalculator
        print("‚úÖ Calculateur d'observations")
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("\nüí° Solutions possibles:")
        print("   1. V√©rifiez que tous les fichiers __init__.py sont pr√©sents")
        print("   2. V√©rifiez la structure des r√©pertoires")
        print("   3. Ex√©cutez le script check_imports.py")
        sys.exit(1)
    
    # Lancement de l'application
    print("\nüöÄ Lancement de l'application...")
    print("=" * 60)
    
    try:
        gui_main()
    except KeyboardInterrupt:
        print("\nüëã Arr√™t par l'utilisateur")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()