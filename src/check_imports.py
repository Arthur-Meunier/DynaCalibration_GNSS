# -*- coding: utf-8 -*-
"""
Created on Wed Jul 16 01:51:24 2025

@author: a.meunier
"""

#!/usr/bin/env python3
"""
Script de v√©rification des imports pour le projet de calibration.

Ce script teste que tous les modules peuvent √™tre import√©s correctement
et affiche un rapport d√©taill√© des erreurs √©ventuelles.

Usage:
    cd src
    python check_imports.py
"""

import sys
import os
from pathlib import Path

def setup_path():
    """Configure le PYTHONPATH pour les tests."""
    current_dir = Path(__file__).parent
    project_root = current_dir.parent
    
    if str(current_dir) not in sys.path:
        sys.path.insert(0, str(current_dir))
    
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))
    
    print(f"üìÅ Test depuis: {current_dir}")
    print(f"üìÅ Projet racine: {project_root}")
    return current_dir

def test_basic_dependencies():
    """Teste les d√©pendances Python de base."""
    print("\nüîç TEST DES D√âPENDANCES DE BASE")
    print("-" * 40)
    
    dependencies = [
        'PyQt5',
        'PyQt5.QtWidgets', 
        'PyQt5.QtCore',
        'PyQt5.QtGui',
        'numpy',
        'pandas', 
        'scipy',
        'scipy.spatial.transform',
        'matplotlib',
        'matplotlib.pyplot',
        'pyqtgraph'
    ]
    
    success = 0
    for dep in dependencies:
        try:
            __import__(dep)
            print(f"‚úÖ {dep}")
            success += 1
        except ImportError as e:
            print(f"‚ùå {dep}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è {dep}: {e}")
    
    print(f"\nüìä D√©pendances: {success}/{len(dependencies)} OK")
    return success == len(dependencies)

def test_project_structure():
    """V√©rifie la structure des fichiers du projet."""
    print("\nüîç TEST DE LA STRUCTURE DU PROJET")
    print("-" * 40)
    
    required_files = [
        "app/__init__.py",
        "app/gui/__init__.py",
        "app/gui/app_data.py",
        "app/gui/menu_vertical.py",
        "app/gui/page_accueil.py",
        "app/gui/page_dimcon.py",
        "app/gui/page_gnss.py",
        "app/gui/page_observation.py",
        "app/core/__init__.py",
        "app/core/calculations/__init__.py",
        "app/core/calculations/calculs_observation.py",
        "app/core/importers/__init__.py",
        "app/core/importers/import_observation.py",
        "app/core/importers/import_gnss.py",
        "app/gui_app.py"
    ]
    
    current_dir = Path(__file__).parent
    success = 0
    
    for file_path in required_files:
        full_path = current_dir / file_path
        if full_path.exists():
            print(f"‚úÖ {file_path}")
            success += 1
        else:
            print(f"‚ùå {file_path} - MANQUANT")
    
    print(f"\nüìä Structure: {success}/{len(required_files)} fichiers pr√©sents")
    return success == len(required_files)

def test_project_imports():
    """Teste les imports du projet."""
    print("\nüîç TEST DES MODULES DU PROJET")
    print("-" * 40)
    
    modules_to_test = [
        # Modules GUI de base
        ("app.gui.app_data", "ApplicationData"),
        ("app.gui.menu_vertical", "VerticalMenu"),
        ("app.gui.page_accueil", "HomePageWidget"),
        
        # Modules GUI principaux
        ("app.gui.page_dimcon", "DimconWidget"),
        ("app.gui.page_gnss", "GnssWidget"),
        ("app.gui.page_observation", "ObservationWidget"),
        
        # Modules core - calculations
        ("app.core.calculations.calculs_observation", "ObservationCalculator"),
        
        # Modules core - importers
        ("app.core.importers.import_observation", "ObservationImportDialog"),
        ("app.core.importers.import_gnss", "GNSSImportDialog"),
        
        # Module principal
        ("app.gui_app", "MainWindow"),
    ]
    
    success = 0
    errors = []
    
    for module_name, class_name in modules_to_test:
        try:
            module = __import__(module_name, fromlist=[class_name])
            cls = getattr(module, class_name)
            print(f"‚úÖ {module_name}.{class_name}")
            success += 1
        except ImportError as e:
            error_msg = f"‚ùå {module_name}.{class_name}: Import Error - {e}"
            print(error_msg)
            errors.append((module_name, "ImportError", str(e)))
        except AttributeError as e:
            error_msg = f"‚ö†Ô∏è {module_name}.{class_name}: Attribute Error - {e}"
            print(error_msg)
            errors.append((module_name, "AttributeError", str(e)))
        except Exception as e:
            error_msg = f"‚ö†Ô∏è {module_name}.{class_name}: {type(e).__name__} - {e}"
            print(error_msg)
            errors.append((module_name, type(e).__name__, str(e)))
    
    print(f"\nüìä Modules projet: {success}/{len(modules_to_test)} OK")
    
    # Affichage d√©taill√© des erreurs
    if errors:
        print(f"\nüîç ANALYSE DES ERREURS:")
        print("-" * 30)
        for module, error_type, error_msg in errors:
            print(f"Module: {module}")
            print(f"  Type: {error_type}")
            print(f"  D√©tail: {error_msg}")
            print()
    
    return success == len(modules_to_test)

def test_critical_instantiation():
    """Teste l'instanciation des classes critiques."""
    print("\nüîç TEST D'INSTANCIATION DES CLASSES CRITIQUES")
    print("-" * 50)
    
    tests = []
    
    # Test ApplicationData
    try:
        from app.gui.app_data import ApplicationData
        app_data = ApplicationData()
        print("‚úÖ ApplicationData() - Instanciation OK")
        
        # Test des m√©thodes de base
        if hasattr(app_data, 'dimcon'):
            print("‚úÖ ApplicationData.dimcon - Attribut pr√©sent")
        if hasattr(app_data, 'gnss_data'):
            print("‚úÖ ApplicationData.gnss_data - Attribut pr√©sent")
        
        tests.append(True)
    except Exception as e:
        print(f"‚ùå ApplicationData(): {e}")
        tests.append(False)
    
    # Test ObservationCalculator
    try:
        from app.core.calculations.calculs_observation import ObservationCalculator
        calc = ObservationCalculator()
        print("‚úÖ ObservationCalculator() - Instanciation OK")
        
        # Test des m√©thodes principales
        if hasattr(calc, 'calculate_all_sensors'):
            print("‚úÖ ObservationCalculator.calculate_all_sensors - M√©thode pr√©sente")
        if hasattr(calc, 'set_data_model'):
            print("‚úÖ ObservationCalculator.set_data_model - M√©thode pr√©sente")
        
        tests.append(True)
    except Exception as e:
        print(f"‚ùå ObservationCalculator(): {e}")
        tests.append(False)
    
    # Test imports des dialogues (sans instancier car n√©cessite QApplication)
    try:
        from app.core.importers.import_observation import ObservationImportDialog
        print("‚úÖ ObservationImportDialog (import) - OK")
        tests.append(True)
    except Exception as e:
        print(f"‚ùå ObservationImportDialog (import): {e}")
        tests.append(False)
    
    try:
        from app.core.importers.import_gnss import GNSSImportDialog
        print("‚úÖ GNSSImportDialog (import) - OK")
        tests.append(True)
    except Exception as e:
        print(f"‚ùå GNSSImportDialog (import): {e}")
        tests.append(False)
    
    # Test GUI principal (import seulement)
    try:
        from app.gui_app import MainWindow
        print("‚úÖ MainWindow (import) - OK")
        tests.append(True)
    except Exception as e:
        print(f"‚ùå MainWindow (import): {e}")
        tests.append(False)
    
    print(f"\nüìä Instanciations: {sum(tests)}/{len(tests)} OK")
    return all(tests)

def test_imports_fixes():
    """V√©rifie que les imports relatifs sont correctement configur√©s."""
    print("\nüîç TEST DES IMPORTS RELATIFS")
    print("-" * 40)
    
    import_tests = []
    
    # Test 1: V√©rifier que page_observation importe correctement
    try:
        # Simuler l'import depuis page_observation
        import app.gui.page_observation as po_module
        
        # V√©rifier que les classes attendues sont disponibles
        if hasattr(po_module, 'ObservationWidget'):
            print("‚úÖ page_observation.ObservationWidget disponible")
            import_tests.append(True)
        else:
            print("‚ùå page_observation.ObservationWidget manquant")
            import_tests.append(False)
            
    except Exception as e:
        print(f"‚ùå Erreur import page_observation: {e}")
        import_tests.append(False)
    
    # Test 2: V√©rifier que page_gnss importe correctement
    try:
        import app.gui.page_gnss as gnss_module
        
        if hasattr(gnss_module, 'GnssWidget'):
            print("‚úÖ page_gnss.GnssWidget disponible")
            import_tests.append(True)
        else:
            print("‚ùå page_gnss.GnssWidget manquant")
            import_tests.append(False)
            
    except Exception as e:
        print(f"‚ùå Erreur import page_gnss: {e}")
        import_tests.append(False)
    
    # Test 3: Cha√Æne compl√®te d'imports
    try:
        from app.gui.page_observation import ObservationWidget
        from app.core.calculations.calculs_observation import ObservationCalculator
        from app.core.importers.import_observation import ObservationImportDialog
        print("‚úÖ Cha√Æne d'imports observation compl√®te")
        import_tests.append(True)
    except Exception as e:
        print(f"‚ùå Cha√Æne d'imports observation: {e}")
        import_tests.append(False)
    
    print(f"\nüìä Imports relatifs: {sum(import_tests)}/{len(import_tests)} OK")
    return all(import_tests)

def generate_diagnostic_report():
    """G√©n√®re un rapport de diagnostic complet."""
    print("\nüìã G√âN√âRATION DU RAPPORT DE DIAGNOSTIC")
    print("=" * 50)
    
    # Tests complets
    structure_ok = test_project_structure()
    deps_ok = test_basic_dependencies()
    imports_ok = test_project_imports() 
    instance_ok = test_critical_instantiation()
    relatifs_ok = test_imports_fixes()
    
    # R√©sum√© d√©taill√©
    print(f"\nüìä R√âSUM√â D√âTAILL√â")
    print("=" * 30)
    print(f"Structure fichiers: {'‚úÖ' if structure_ok else '‚ùå'}")
    print(f"D√©pendances:        {'‚úÖ' if deps_ok else '‚ùå'}")
    print(f"Imports modules:    {'‚úÖ' if imports_ok else '‚ùå'}")
    print(f"Instanciations:     {'‚úÖ' if instance_ok else '‚ùå'}")
    print(f"Imports relatifs:   {'‚úÖ' if relatifs_ok else '‚ùå'}")
    
    overall_status = all([structure_ok, deps_ok, imports_ok, instance_ok, relatifs_ok])
    
    print(f"\n{'='*50}")
    if overall_status:
        print(f"üéâ STATUT GLOBAL: ‚úÖ SUCC√àS COMPLET")
        print("   L'application devrait fonctionner parfaitement.")
        print("\nüöÄ Pr√™t √† lancer:")
        print("   python main.py")
    else:
        print(f"‚ö†Ô∏è STATUT GLOBAL: ‚ùå CORRECTIONS N√âCESSAIRES")
        print("   Des ajustements sont requis avant le lancement.")
        
        print(f"\nüí° ACTIONS RECOMMAND√âES:")
        
        if not structure_ok:
            print("   üìÅ Structure:")
            print("      - Cr√©ez les fichiers manquants list√©s ci-dessus")
            print("      - V√©rifiez que tous les __init__.py sont pr√©sents")
        
        if not deps_ok:
            print("   üì¶ D√©pendances:")
            print("      - pip install PyQt5 numpy pandas scipy matplotlib pyqtgraph")
        
        if not imports_ok:
            print("   üì• Imports modules:")
            print("      - V√©rifiez le contenu des fichiers Python")
            print("      - Corrigez les erreurs de syntaxe")
            print("      - Assurez-vous que toutes les classes sont d√©finies")
        
        if not instance_ok:
            print("   üèóÔ∏è Instanciations:")
            print("      - Corrigez les erreurs dans les constructeurs")
            print("      - V√©rifiez les imports dans les modules")
        
        if not relatifs_ok:
            print("   üîó Imports relatifs:")
            print("      - Corrigez les imports dans page_observation.py")
            print("      - Corrigez les imports dans page_gnss.py")
            print("      - Utilisez la syntaxe: from ..core.module import Class")
    
    print(f"{'='*50}")
    return overall_status

def show_help():
    """Affiche l'aide du script."""
    print("""
üîç SCRIPT DE V√âRIFICATION DES IMPORTS

Ce script v√©rifie que votre projet de calibration est correctement configur√©.

USAGE:
    cd src/
    python check_imports.py

TESTS EFFECTU√âS:
    ‚úì Structure des fichiers et r√©pertoires
    ‚úì D√©pendances Python (PyQt5, numpy, etc.)
    ‚úì Imports des modules du projet
    ‚úì Instanciation des classes critiques
    ‚úì Imports relatifs entre modules

CODES DE SORTIE:
    0 = Succ√®s (tout fonctionne)
    1 = √âchec (corrections n√©cessaires)
    
AIDE:
    python check_imports.py --help
    """)

def main():
    """Fonction principale du script de v√©rification."""
    
    # Gestion des arguments
    if len(sys.argv) > 1 and sys.argv[1] in ['--help', '-h', 'help']:
        show_help()
        return
    
    print("üîç V√âRIFICATION COMPL√àTE DES IMPORTS - PROJET CALIBRATION")
    print("=" * 65)
    
    # Configuration de l'environnement
    setup_path()
    
    # Ex√©cution du diagnostic complet
    success = generate_diagnostic_report()
    
    # Affichage final
    print(f"\n‚è±Ô∏è V√©rification termin√©e.")
    
    if success:
        print("üéØ R√©sultat: Projet pr√™t √† √™tre lanc√©!")
    else:
        print("üîß R√©sultat: Corrections n√©cessaires.")
    
    # Code de sortie pour scripts automatis√©s
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()